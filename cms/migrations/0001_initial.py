# Generated by Django 4.2.5 on 2023-12-24 09:58

import cms.blocks
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.models
import wagtail.search.index

# import wagtailmenus.models.menuitems
# import wagtailmenus.models.menus
# import wagtailmenus.models.mixins


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("wagtailcore", "0089_log_entry_data_json_null_to_object"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("wagtailimages", "0025_alter_image_file_alter_rendition_file"),
    ]

    operations = [
        migrations.CreateModel(
            name="BlogIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="BlogPostPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("description", models.TextField(max_length=1024)),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            ("embed_section", cms.blocks.EmbedSectionBlock()),
                            ("rich_text_section", cms.blocks.RichTextSection()),
                            (
                                "quote_section",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("text", wagtail.blocks.TextBlock()),
                                        (
                                            "attribute_name",
                                            wagtail.blocks.CharBlock(
                                                blank=True,
                                                label="e.g. Mary Berry",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "image_section",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(
                                                required=True
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                    ]
                                ),
                            ),
                        ],
                        blank=True,
                        null=True,
                        use_json_field=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="CustomFlatMenu",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="For internal reference only.",
                        max_length=255,
                        verbose_name="title",
                    ),
                ),
                (
                    "handle",
                    models.SlugField(
                        help_text="Used to reference this menu in templates etc. Must be unique for the selected site.",
                        max_length=100,
                        verbose_name="handle",
                    ),
                ),
                (
                    "heading",
                    models.CharField(
                        blank=True,
                        help_text="If supplied, appears above the menu when rendered.",
                        max_length=255,
                        verbose_name="heading",
                    ),
                ),
                (
                    "heading_en",
                    models.CharField(
                        blank=True,
                        help_text="If supplied, appears above the menu when rendered.",
                        max_length=255,
                        null=True,
                        verbose_name="heading",
                    ),
                ),
                (
                    "heading_es",
                    models.CharField(
                        blank=True,
                        help_text="If supplied, appears above the menu when rendered.",
                        max_length=255,
                        null=True,
                        verbose_name="heading",
                    ),
                ),
                (
                    "heading_de",
                    models.CharField(
                        blank=True,
                        help_text="If supplied, appears above the menu when rendered.",
                        max_length=255,
                        null=True,
                        verbose_name="heading",
                    ),
                ),
                (
                    "max_levels",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "1: No sub-navigation (flat)"),
                            (2, "2: Allow 1 level of sub-navigation"),
                            (3, "3: Allow 2 levels of sub-navigation"),
                            (4, "4: Allow 3 levels of sub-navigation"),
                        ],
                        default=1,
                        help_text="The maximum number of levels to display when rendering this menu. The value can be overidden by supplying a different <code>max_levels</code> value to the <code>{% flat_menu %}</code> tag in your templates.",
                        verbose_name="maximum levels",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailcore.site",
                        verbose_name="site",
                    ),
                ),
            ],
            options={
                "verbose_name": "flat menu",
                "verbose_name_plural": "flat menus",
                "abstract": False,
                "unique_together": {("site", "handle")},
            },
            # bases=(
            #     wagtailmenus.models.mixins.DefinesSubMenuTemplatesMixin,
            #     models.Model,
            #     wagtailmenus.models.menus.Menu,
            # ),
        ),
        migrations.CreateModel(
            name="CustomMainMenu",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "max_levels",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "1: No sub-navigation (flat)"),
                            (2, "2: Allow 1 level of sub-navigation"),
                            (3, "3: Allow 2 levels of sub-navigation"),
                            (4, "4: Allow 3 levels of sub-navigation"),
                        ],
                        default=2,
                        help_text="The maximum number of levels to display when rendering this menu. The value can be overidden by supplying a different <code>max_levels</code> value to the <code>{% main_menu %}</code> tag in your templates.",
                        verbose_name="maximum levels",
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailcore.site",
                        verbose_name="site",
                    ),
                ),
            ],
            options={
                "verbose_name": "main menu",
                "verbose_name_plural": "main menu",
                "abstract": False,
            },
            # bases=(
            #     wagtailmenus.models.mixins.DefinesSubMenuTemplatesMixin,
            #     models.Model,
            #     wagtailmenus.models.menus.Menu,
            # ),
        ),
        migrations.CreateModel(
            name="DjangoServedPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="FlexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="FrequentAskedQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question", models.CharField(max_length=128)),
                ("question_en", models.CharField(max_length=128, null=True)),
                ("question_es", models.CharField(max_length=128, null=True)),
                ("question_de", models.CharField(max_length=128, null=True)),
                ("answer", models.TextField()),
                ("answer_en", models.TextField(null=True)),
                ("answer_es", models.TextField(null=True)),
                ("answer_de", models.TextField(null=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("pricing", "Related to Pricing"),
                            ("featured", "Featured"),
                        ],
                        max_length=16,
                    ),
                ),
                ("active", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="HomePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            (
                                "hero_section",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "template_type",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    (
                                                        "with-phone-mockup",
                                                        "With phone mockup",
                                                    ),
                                                    (
                                                        "split-with-image",
                                                        "Split with image",
                                                    ),
                                                ]
                                            ),
                                        ),
                                        (
                                            "hero_title",
                                            wagtail.blocks.CharBlock(
                                                help_text="Write a title",
                                                max_length=255,
                                                null=True,
                                            ),
                                        ),
                                        (
                                            "hero_text",
                                            wagtail.blocks.CharBlock(
                                                help_text="Write an introduction",
                                                max_length=255,
                                                null=True,
                                            ),
                                        ),
                                        (
                                            "hero_cta",
                                            wagtail.blocks.CharBlock(
                                                help_text="Text to display on Call to Action",
                                                max_length=255,
                                                null=True,
                                                verbose_name="Hero CTA",
                                            ),
                                        ),
                                        (
                                            "hero_cta_link",
                                            wagtail.blocks.PageChooserBlock(),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "header_section",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "heading_text",
                                            wagtail.blocks.CharBlock(
                                                form_classname="title", required=True
                                            ),
                                        ),
                                        (
                                            "description",
                                            wagtail.blocks.TextBlock(required=False),
                                        ),
                                        (
                                            "template_type",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("simple", "Simple"),
                                                    (
                                                        "simple-on-dark",
                                                        "Simple on dark",
                                                    ),
                                                    ("centered", "Centered"),
                                                    (
                                                        "centered-on-dark",
                                                        "Centered on dark",
                                                    ),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "feature_section",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "heading_text",
                                            wagtail.blocks.CharBlock(
                                                help_text="Write the heading",
                                                max_length=255,
                                                null=True,
                                            ),
                                        ),
                                        (
                                            "slogan",
                                            wagtail.blocks.CharBlock(
                                                help_text="Add a slogan",
                                                max_length=255,
                                                null=True,
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "description",
                                            wagtail.blocks.TextBlock(
                                                help_text="Description of the feature section",
                                                max_length=512,
                                                null=True,
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(
                                                required=False
                                            ),
                                        ),
                                        (
                                            "template_type",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("centered", "Centered"),
                                                    ("with-offset", "With offset"),
                                                    (
                                                        "with-image-on-left",
                                                        "With image on left",
                                                    ),
                                                    (
                                                        "with-image-on-right",
                                                        "With image on right",
                                                    ),
                                                ]
                                            ),
                                        ),
                                        (
                                            "items",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        (
                                                            "name",
                                                            wagtail.blocks.CharBlock(
                                                                blank=True,
                                                                help_text="Feature name",
                                                                max_length=255,
                                                                null=True,
                                                            ),
                                                        ),
                                                        (
                                                            "description",
                                                            wagtail.blocks.TextBlock(
                                                                blank=True,
                                                                help_text="Feature description",
                                                                max_length=512,
                                                                null=True,
                                                            ),
                                                        ),
                                                        (
                                                            "svg",
                                                            wagtail.images.blocks.ImageChooserBlock(
                                                                help_text="Feature svg"
                                                            ),
                                                        ),
                                                    ]
                                                ),
                                                label="Feature items",
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ("embed_section", cms.blocks.EmbedSectionBlock()),
                            ("richtext_section", cms.blocks.RichTextSection()),
                            (
                                "richtext_and_image_section",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "text",
                                            wagtail.blocks.RichTextBlock(
                                                features=[
                                                    "h2",
                                                    "h3",
                                                    "h4",
                                                    "bold",
                                                    "italic",
                                                    "ol",
                                                    "ul",
                                                    "link",
                                                    "document-link",
                                                ]
                                            ),
                                        ),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "template_type",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    (
                                                        "with-image-on-left",
                                                        "With image on left",
                                                    ),
                                                    (
                                                        "with-image-on-right",
                                                        "With image on right",
                                                    ),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "quote_section",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("text", wagtail.blocks.TextBlock()),
                                        (
                                            "attribute_name",
                                            wagtail.blocks.CharBlock(
                                                blank=True,
                                                label="e.g. Mary Berry",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "image_section",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(
                                                required=True
                                            ),
                                        ),
                                        (
                                            "caption",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                    ]
                                ),
                            ),
                        ],
                        blank=True,
                        null=True,
                        use_json_field=True,
                        verbose_name="Home content block",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="TextPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            (
                                "rich_text_section",
                                cms.blocks.RichTextSection(
                                    features=[
                                        "h2",
                                        "h3",
                                        "h4",
                                        "bold",
                                        "italic",
                                        "ol",
                                        "ul",
                                        "link",
                                        "document-link",
                                    ]
                                ),
                            )
                        ],
                        blank=True,
                        null=True,
                        use_json_field=True,
                        verbose_name="Home content block",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="SocialMediaLinks",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "facebook",
                    models.URLField(blank=True, help_text="Facebook URL", null=True),
                ),
                (
                    "twitter",
                    models.URLField(blank=True, help_text="Twitter URL", null=True),
                ),
                (
                    "youtube",
                    models.URLField(
                        blank=True, help_text="YouTube Channel URL", null=True
                    ),
                ),
                (
                    "linkedin",
                    models.URLField(blank=True, help_text="Linkedin URL", null=True),
                ),
                (
                    "github",
                    models.URLField(blank=True, help_text="GitHub URL", null=True),
                ),
                (
                    "instagram",
                    models.URLField(blank=True, help_text="Instagram URL", null=True),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "live",
                    models.BooleanField(
                        default=True, editable=False, verbose_name="live"
                    ),
                ),
                (
                    "has_unpublished_changes",
                    models.BooleanField(
                        default=False,
                        editable=False,
                        verbose_name="has unpublished changes",
                    ),
                ),
                (
                    "first_published_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="first published at",
                    ),
                ),
                (
                    "last_published_at",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="last published at"
                    ),
                ),
                (
                    "go_live_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="go live date/time"
                    ),
                ),
                (
                    "expire_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="expiry date/time"
                    ),
                ),
                (
                    "expired",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="expired"
                    ),
                ),
                (
                    "locked",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="locked"
                    ),
                ),
                (
                    "locked_at",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="locked at"
                    ),
                ),
                ("name", models.CharField(max_length=256, verbose_name="Full name")),
                (
                    "job_title",
                    models.CharField(max_length=254, verbose_name="Job title"),
                ),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "latest_revision",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.revision",
                        verbose_name="latest revision",
                    ),
                ),
                (
                    "live_revision",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.revision",
                        verbose_name="live revision",
                    ),
                ),
                (
                    "locked_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="locked_%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="locked by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Person",
                "verbose_name_plural": "People",
            },
            bases=(
                wagtail.models.WorkflowMixin,
                wagtail.models.PreviewableMixin,
                wagtail.search.index.Indexed,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="CustomMainMenuItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "link_url",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="link to a custom URL",
                    ),
                ),
                (
                    "url_append",
                    models.CharField(
                        blank=True,
                        help_text="Use this to optionally append a #hash or querystring to the above page's URL.",
                        max_length=255,
                        verbose_name="append to URL",
                    ),
                ),
                (
                    "handle",
                    models.CharField(
                        blank=True,
                        help_text="Use this field to optionally specify an additional value for each menu item, which you can then reference in custom menu templates.",
                        max_length=100,
                        verbose_name="handle",
                    ),
                ),
                (
                    "link_text",
                    models.CharField(
                        blank=True,
                        help_text="Provide the text to use for a custom URL, or set on an internal page link to use instead of the page's title.",
                        max_length=255,
                        verbose_name="link text",
                    ),
                ),
                (
                    "link_text_en",
                    models.CharField(
                        blank=True,
                        help_text="Provide the text to use for a custom URL, or set on an internal page link to use instead of the page's title.",
                        max_length=255,
                        null=True,
                        verbose_name="link text",
                    ),
                ),
                (
                    "link_text_es",
                    models.CharField(
                        blank=True,
                        help_text="Provide the text to use for a custom URL, or set on an internal page link to use instead of the page's title.",
                        max_length=255,
                        null=True,
                        verbose_name="link text",
                    ),
                ),
                (
                    "link_text_de",
                    models.CharField(
                        blank=True,
                        help_text="Provide the text to use for a custom URL, or set on an internal page link to use instead of the page's title.",
                        max_length=255,
                        null=True,
                        verbose_name="link text",
                    ),
                ),
                (
                    "allow_subnav",
                    models.BooleanField(
                        default=True,
                        help_text="NOTE: The sub-menu might not be displayed, even if checked. It depends on how the menu is used in this project's templates.",
                        verbose_name="allow sub-menu for this item",
                    ),
                ),
                ("add_to_profile_dropdown", models.BooleanField(default=False)),
                (
                    "link_page",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.page",
                        verbose_name="link to an internal page",
                    ),
                ),
                (
                    "menu",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="menu_items",
                        to="cms.custommainmenu",
                    ),
                ),
            ],
            options={
                "verbose_name": "menu item",
                "verbose_name_plural": "menu items",
                "ordering": ("sort_order",),
                "abstract": False,
            },
            # bases=(models.Model, wagtailmenus.models.menuitems.MenuItem),
        ),
        migrations.CreateModel(
            name="CustomFlatMenuItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "link_url",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="link to a custom URL",
                    ),
                ),
                (
                    "url_append",
                    models.CharField(
                        blank=True,
                        help_text="Use this to optionally append a #hash or querystring to the above page's URL.",
                        max_length=255,
                        verbose_name="append to URL",
                    ),
                ),
                (
                    "handle",
                    models.CharField(
                        blank=True,
                        help_text="Use this field to optionally specify an additional value for each menu item, which you can then reference in custom menu templates.",
                        max_length=100,
                        verbose_name="handle",
                    ),
                ),
                (
                    "link_text",
                    models.CharField(
                        blank=True,
                        help_text="Provide the text to use for a custom URL, or set on an internal page link to use instead of the page's title.",
                        max_length=255,
                        verbose_name="link text",
                    ),
                ),
                (
                    "link_text_en",
                    models.CharField(
                        blank=True,
                        help_text="Provide the text to use for a custom URL, or set on an internal page link to use instead of the page's title.",
                        max_length=255,
                        null=True,
                        verbose_name="link text",
                    ),
                ),
                (
                    "link_text_es",
                    models.CharField(
                        blank=True,
                        help_text="Provide the text to use for a custom URL, or set on an internal page link to use instead of the page's title.",
                        max_length=255,
                        null=True,
                        verbose_name="link text",
                    ),
                ),
                (
                    "link_text_de",
                    models.CharField(
                        blank=True,
                        help_text="Provide the text to use for a custom URL, or set on an internal page link to use instead of the page's title.",
                        max_length=255,
                        null=True,
                        verbose_name="link text",
                    ),
                ),
                (
                    "allow_subnav",
                    models.BooleanField(
                        default=False,
                        help_text="NOTE: The sub-menu might not be displayed, even if checked. It depends on how the menu is used in this project's templates.",
                        verbose_name="allow sub-menu for this item",
                    ),
                ),
                (
                    "link_page",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.page",
                        verbose_name="link to an internal page",
                    ),
                ),
                (
                    "menu",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="menu_items",
                        to="cms.customflatmenu",
                    ),
                ),
            ],
            options={
                "verbose_name": "menu item",
                "verbose_name_plural": "menu items",
                "ordering": ("sort_order",),
                "abstract": False,
            },
            # bases=(models.Model, wagtailmenus.models.menuitems.MenuItem),
        ),
        migrations.CreateModel(
            name="Brand",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("footer_text", models.TextField(blank=True, null=True)),
                ("footer_text_en", models.TextField(blank=True, null=True)),
                ("footer_text_es", models.TextField(blank=True, null=True)),
                ("footer_text_de", models.TextField(blank=True, null=True)),
                ("name", models.CharField(blank=True, max_length=16, null=True)),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
                (
                    "svg",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "svg_footer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BlogPersonRelationship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blog_person_relationship",
                        to="cms.blogpostpage",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="person_blog_relationship",
                        to="cms.person",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Banner",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=32, null=True)),
                ("title_en", models.CharField(blank=True, max_length=32, null=True)),
                ("title_es", models.CharField(blank=True, max_length=32, null=True)),
                ("title_de", models.CharField(blank=True, max_length=32, null=True)),
                ("text", models.CharField(blank=True, max_length=255, null=True)),
                ("text_en", models.CharField(blank=True, max_length=255, null=True)),
                ("text_es", models.CharField(blank=True, max_length=255, null=True)),
                ("text_de", models.CharField(blank=True, max_length=255, null=True)),
                ("active", models.BooleanField(default=True)),
                (
                    "linked_page",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "linked_page_de",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "linked_page_en",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "linked_page_es",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
